PROJECT( rtems )
CMAKE_MINIMUM_REQUIRED( VERSION 3.6 )
enable_language(ASM)

INCLUDE( CheckIncludeFiles )
INCLUDE( CheckTypeSize )
INCLUDE( CheckFunctionExists )
INCLUDE( CheckSymbolExists )
INCLUDE( CheckCSourceCompiles )
INCLUDE( CMakeDependentOption )

OPTION( RTEMS_PREINSTALL "implicit preinstall dependencies" ON )
# Path to preinstall headers
SET( RTEMS_PREINSTALL_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/include" )
# RTEMS Target
SET( RTEMS_TARGET ${RTEMS_DEFAULT_TARGET} CACHE STRING "RTEMS Target" )
SET( LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/lib )

INCLUDE( cmake/utils.cmake )

IF( EXISTS "${CMAKE_SOURCE_DIR}/cmake/target/${RTEMS_TARGET}.cmake" )
  INCLUDE( "${CMAKE_SOURCE_DIR}/cmake/target/${RTEMS_TARGET}.cmake" )
ELSE()
  MESSAGE( FATAL_ERROR "unknown target ${RTEMS_TARGET}" )
ENDIF()

ADD_COMPILE_OPTIONS( ${RTEMS_BSP_CFLAGS} )
IF( CMAKE_BUILD_TYPE STREQUAL "Debug" )
  ADD_COMPILE_OPTIONS( ${RTEMS_BSP_CFLAGS_DEBUG} )
ELSEIF( CMAKE_BUILD_TYPE STREQUAL "Release" )
  ADD_COMPILE_OPTIONS( ${RTEMS_BSP_CFLAGS_RELEASE} )
ENDIF()

# RTEMS_ENABLE_MULTIPROCESSING
# RTEMS_ENABLE_POSIX
# RTEMS_ENABLE_NETWORKING
# RTEMS_ENABLE_CXX
# RTEMS_ENABLE_TESTS
# RTEMS_ENABLE_RTEMS_DEBUG
# RTEMS_ENABLE_RTEMSBSP
# RTEMS_ENABLE_MULTILIB
# RTEMS_ENABLE_PARAVIRT
# RTEMS_ENABLE_DRVMGR

OPTION( RTEMS_DEBUG "enable RTEMS_DEBUG" OFF )
OPTION( RTEMS_SMP "enable SMP" OFF )
OPTION( RTEMS_MULTIPROCESSING "enable multiprocessing interface" OFF )
OPTION( RTEMS_POSIX_API "enable posix interface" ON )
SET( RTEMS_PTHREADS ${RTEMS_POSIX_API} ) # TODO (snob): REMOVE
OPTION( RTEMS_PARAVIRT "enable support for paravirtualization" OFF )
OPTION( RTEMS_PROFILING "enable support for profiling" OFF )
OPTION( RTEMS_NETWORKING "enable TCP/IP stack" ON )
SET( __RTEMS_ADA__ )
OPTION( RTEMS_CPLUSPLUS "enable C++ support" ON )
OPTION( RTEMS_DRVMGR_STARTUP "Enable drvmgr at startup" OFF )
SET( RTEMS_NEWLIB 1 ) # TODO (snob): autodetect?
SET( __RTEMS_MAJOR__ 4 )
SET( __RTEMS_MINOR__ 10 )
SET( __RTEMS_REVISION__ 99 )
SET( RTEMS_VERSION
  "${__RTEMS_MAJOR__}.${__RTEMS_MINOR__}.${__RTEMS_REVISION__}.0"
)

OPTION( 
  __RTEMS_DO_NOT_INLINE_THREAD_ENABLE_DISPATCH__ 
  "This improves both the size and coverage analysis"
  OFF
)
OPTION( 
  __RTEMS_STRICT_ORDER_MUTEX__ 
  "This gives the same behavior as 4.8 and older"
  OFF
)
# 
OPTION( 
  __RTEMS_DO_NOT_INLINE_CORE_MUTEX_SEIZE__ 
  "This improves both the size and coverage analysis"
  OFF
)

# TEST building 
OPTION( RTEMS_BUILD_ALL "Build everything" ON )
OPTION( RTEMS_BUILD_SAMPLES "Build samples" ON )
OPTION( RTEMS_BUILD_RHEALSTONE "Build rhealstone" OFF )
OPTION( RTEMS_BUILD_FSTESTS "Build fstests" OFF )
OPTION( RTEMS_BUILD_LIBTESTS "Build libtests" OFF )
OPTION( RTEMS_BUILD_MPTESTS "Build mptests" OFF )
OPTION( RTEMS_BUILD_PSXTESTS "Build psxtests" OFF )
OPTION( RTEMS_BUILD_PSXTMTESTS "Build psxtmtests" OFF )
OPTION( RTEMS_BUILD_SMPTESTS "Build smptests" OFF )
OPTION( RTEMS_BUILD_SPTESTS "Build sptests" OFF )
OPTION( RTEMS_BUILD_TMTESTS "Build tmtests" OFF )

IF( RTEMS_BUILD_ALL )
  SET( RTEMS_BUILD_SAMPLES ON )
  SET( RTEMS_BUILD_RHEALSTONE ON )
  SET( RTEMS_BUILD_FSTESTS ON )
  SET( RTEMS_BUILD_LIBTESTS ON )
  SET( RTEMS_BUILD_MPTESTS ON )
  SET( RTEMS_BUILD_PSXTESTS ON )
  SET( RTEMS_BUILD_PSXTMTESTS ON )
  SET( RTEMS_BUILD_SMPTESTS ON )
  SET( RTEMS_BUILD_SPTESTS ON )
  SET( RTEMS_BUILD_TMTESTS ON )
ENDIF()

CHECK_INCLUDE_FILE( inttypes.h HAVE_INTTYPES_H )
CHECK_INCLUDE_FILE( unistd.h HAVE_UNISTD_H )
CHECK_INCLUDE_FILE( stdint.h HAVE_STDINT_H )
CHECK_INCLUDE_FILE( stdlib.h HAVE_STDLIB_H )
CHECK_INCLUDE_FILE( stdint.h HAVE_STDINT ) # for mongoose
CHECK_INCLUDE_FILE( strings.h HAVE_STRINGS_H )
CHECK_INCLUDE_FILE( sys/stat.h HAVE_SYS_STAT_H )
CHECK_INCLUDE_FILE( sys/types.h HAVE_SYS_TYPES_H )
CHECK_INCLUDE_FILE( sys/mman.h HAVE_SYS_MMAN_H )
CHECK_INCLUDE_FILE( signal.h HAVE_SIGNAL_H )
CHECK_INCLUDE_FILE( semaphore.h HAVE_SEMAPHORE_H )
CHECK_INCLUDE_FILE( envlock.h HAVE_ENVLOCK_H )
CHECK_INCLUDE_FILE( sys/cpuset.h __RTEMS_HAVE_SYS_CPUSET_H__ )
IF( HAVE_SIGNAL_H )
  RTEMS_CHECK_TYPE( sighandler_t signal.h HAVE_SIGHANDLER_T )
  RTEMS_CHECK_DECL(
    sigaltstack
    signal.h
    __RTEMS_HAVE_DECL_SIGALTSTACK__
  )
ENDIF()
CHECK_TYPE_SIZE( "uint8_t" SIZEOF_UINT8_T )
CHECK_TYPE_SIZE( "uint16_t" SIZEOF_UINT16_T )
CHECK_TYPE_SIZE( "size_t" SIZEOF_SIZE_T )
CHECK_TYPE_SIZE( "mode_t" SIZEOF_MODE_T )
CHECK_TYPE_SIZE( "off_t" SIZEOF_OFF_T )
CHECK_TYPE_SIZE( "time_t" SIZEOF_TIME_T )
CHECK_TYPE_SIZE( "blksize_t" SIZEOF_BLKSIZE_T )
CHECK_TYPE_SIZE( "blkcnt_t" SIZEOF_BLKCNT_T )
RTEMS_CHECK_TYPE( 
  "struct _pthread_cleanup_context" 
  pthread.h
  HAVE_STRUCT__PTHREAD_CLEANUP_CONTEXT
)
CHECK_FUNCTION_EXISTS( isatty HAVE_ISATTY )
CHECK_FUNCTION_EXISTS( readdir_r HAVE_READDIR_R )
CHECK_FUNCTION_EXISTS( strlcat HAVE_STRLCAT )
CHECK_FUNCTION_EXISTS( strlcpy HAVE_STRLCPY )
CHECK_FUNCTION_EXISTS( ttyname HAVE_TTYNAME )
CHECK_FUNCTION_EXISTS( execl HAVE_EXECL )
CHECK_FUNCTION_EXISTS( execle HAVE_EXECLE )
CHECK_FUNCTION_EXISTS( execlp HAVE_EXECLP )
CHECK_FUNCTION_EXISTS( execv HAVE_EXECV )
CHECK_FUNCTION_EXISTS( execve HAVE_EXECVE )
CHECK_FUNCTION_EXISTS( execvp HAVE_EXECVP )
CHECK_FUNCTION_EXISTS( __assert HAVE___ASSERT )
CHECK_FUNCTION_EXISTS( strsep HAVE_STRSEP )
RTEMS_CHECK_DECL( getrusage sys/resource.h HAVE_DECL_GETRUSAGE )
RTEMS_CHECK_DECL( adjtime sys/time.h HAVE_DECL_ADJTIME )
RTEMS_CHECK_DECL( mprotect sys/mman.h HAVE_DECL_MPROTECT )
RTEMS_CHECK_DECL( seteuid unistd.h HAVE_DECL_SETEUID )
RTEMS_CHECK_DECL( rcmd unistd.h HAVE_DECL_RCMD )
RTEMS_CHECK_DECL( pthread_atfork pthread.h HAVE_DECL_PTHREAD_ATFORK )
RTEMS_CHECK_DECL(
  pthread_attr_getstack pthread.h HAVE_DECL_PTHREAD_ATTR_GETSTACK )
RTEMS_CHECK_DECL(
  pthread_attr_setstack pthread.h HAVE_DECL_PTHREAD_ATTR_SETSTACK )
RTEMS_CHECK_DECL(
  pthread_attr_getguardsize 
  pthread.h
  HAVE_DECL_PTHREAD_ATTR_GETGUARDSIZE 
)
RTEMS_CHECK_DECL(
  pthread_attr_setguardsize 
  pthread.h
  HAVE_DECL_PTHREAD_ATTR_SETGUARDSIZE
)
RTEMS_CHECK_DECL( 
  pthread_getattr_np 
  pthread.h 
  HAVE_DECL_PTHREAD_GETATTR_NP 
  -D_GNU_SOURCE=1 
)
RTEMS_CHECK_DECL(
  pthread_getaffinity_np
  pthread.h
  HAVE_DECL_PTHREAD_GETAFFINITY_NP
  -D_GNU_SOURCE=1
)
RTEMS_CHECK_DECL(
  pthread_setaffinity_np
  pthread.h
  HAVE_DECL_PTHREAD_SETAFFINITY_NP
  -D_GNU_SOURCE=1
)
RTEMS_CHECK_DECL(
  pthread_attr_getaffinity_np
  pthread.h
  HAVE_DECL_PTHREAD_ATTR_GETAFFINITY_NP
  -D_GNU_SOURCE=1
)
RTEMS_CHECK_DECL(
  pthread_attr_setaffinity_np
  pthread.h
  HAVE_DECL_PTHREAD_ATTR_SETAFFINITY_NP
  -D_GNU_SOURCE=1
)
RTEMS_CHECK_DECL( 
  pthread_rwlock_unlock pthread.h HAVE_DECL_PTHREAD_RWLOCK_UNLOCK )
CHECK_FUNCTION_EXISTS( flockfile HAVE_FLOCKFILE )
CHECK_FUNCTION_EXISTS( funlockfile HAVE_FUNLOCKFILE )
CHECK_FUNCTION_EXISTS( ftrylockfile HAVE_FTRYLOCKFILE )
RTEMS_CHECK_DECL( flockfile stdio.h HAVE_DECL_FLOCKFILE )
RTEMS_CHECK_DECL( funlockfile stdio.h HAVE_DECL_FUNLOCKFILE )
RTEMS_CHECK_DECL( ftrylockfile stdio.h HAVE_DECL_FTRYLOCKFILE )
CHECK_FUNCTION_EXISTS( getcwd HAVE_GETCWD )
IF( HAVE_ENVLOCK_H )
  RTEMS_CHECK_DECL( __env_lock envlock.h HAVE_DECL___ENV_LOCK )
  RTEMS_CHECK_DECL( __env_unlock envlock.h HAVE_DECL___ENV_UNLOCK )
ENDIF()
CHECK_C_SOURCE_COMPILES( 
"
#include <stdio.h>
int main() { stdin = fopen(\"/tmp\", \"r\"); return 0; }
"
  HAVE_ASSIGNABLE_STDIO
)

RTEMS_BOOL_EXPR( RTEMS_SHELL HAVE_ASSIGNABLE_STDIO )
RTEMS_BOOL_EXPR( RTEMS_DOSFS SIZEOF_UINT8_T AND SIZEOF_UINT16_T )
SET( RTEMS_LIBUTF8 ${SIZEOF_SIZE_T} > 2 )

# TODO: Documentation support

INCLUDE_DIRECTORIES( "${RTEMS_PREINSTALL_DIRECTORY}" )
SUBDIRS( cpukit c/src testsuites )
